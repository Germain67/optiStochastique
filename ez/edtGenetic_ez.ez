\User declarations : // This section is copied on top of the output file
#include <string>
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <sstream>
#include <iterator>
#include <cmath> //std::abs
#define NB_PAPERS 263

using namespace std;

typedef struct{
  double startHour;
  double endHour;
} Interval;

typedef struct{
  int ID;
  int ID_Track;
  int ID_Session;
  int duration;
  double fuseauHoraire;
  vector<Interval> dispoDay1;
  vector<Interval> dispoDay2;
  vector<Interval> dispoDay3;
} Paper;

ifstream fPaper;
vector<Paper> papers;

\end

\User functions:

template<typename Out>
void split(const std::string &s, char delim, Out result) {
    std::stringstream ss;
    ss.str(s);
    std::string item;
    while (std::getline(ss, item, delim)) {
        *(result++) = item;
    }
}

std::vector<std::string> split(const std::string &s, char delim) {
    std::vector<std::string> elems;
    split(s, delim, std::back_inserter(elems));
    return elems;
}

std::vector<Interval> strToIntervals(std::string str)
{
  vector<Interval> res;
  if(str != "*"){
    std::vector<std::string> horaires = split(str, '[');
    for(size_t i = 1; i < horaires.size() ; i++)
    {
      std::vector<std::string> vals = split(horaires[i], ',');
      Interval cur_interval;
      cur_interval.startHour = atof(vals[0].c_str());
      cur_interval.endHour = atof(split(vals[1], ']')[0].c_str());
      res.push_back(cur_interval);
    }
  }
  else
  {
    Interval cur_interval;
    cur_interval.startHour = 0;
    cur_interval.endHour = 23;
    res.push_back(cur_interval);
  }
  return res;
}

void readPapers()
{
  std::ifstream file("../Parser/papers.txt");
  std::string line;
  while (std::getline(file, line))
  {
      std::vector<std::string> lineElems = split(line, '|');
      Paper p;
      p.ID = atoi(lineElems[0].c_str());
      p.ID_Track = atoi(lineElems[1].c_str());
      p.ID_Session = atoi(lineElems[2].c_str());
      p.duration = atoi(lineElems[3].c_str());
      if(lineElems[4] == "*")
      {
        p.fuseauHoraire = 0;
      }
      else
      {
        p.fuseauHoraire = atof(lineElems[4].c_str());
      }
      p.dispoDay1 = strToIntervals(lineElems[5]);
      p.dispoDay2 = strToIntervals(lineElems[6]);
      p.dispoDay3 = strToIntervals(lineElems[7]);
      //p.startDate = NULL;
      papers.push_back(p);
  }
}

void printPaper(Paper p){
  std::cout << "ID : " << p.ID << " ID_SESSION : " << p.ID_Session << " ID_Track : " << p.ID_Track << '\n';
  std::cout << "duration : " << p.duration << " fuseauHoraire " << p.fuseauHoraire << '\n';
  if(p.dispoDay1.size() > 0)
  {
    std::cout << "Start hour Dispo day 1" << p.dispoDay1[0].startHour << '\n';
    std::cout << "End hour Dispo day 1" << p.dispoDay1[0].endHour << '\n';
  }
}

struct tm customDateToTm(CustomDate d)
{
  struct std::tm tmTime;
  tmTime.tm_year = d.year - 1900;
  tmTime.tm_mon = d.month - 1;
  tmTime.tm_mday = d.day;
  tmTime.tm_hour = d.hour;
  tmTime.tm_min = d.minute;
  tmTime.tm_sec = d.second;
  return tmTime;
}

CustomDate tmToCustomDate(struct tm tmTime)
{
  CustomDate d;
  d.year = tmTime.tm_year + 1900;
  d.month = tmTime.tm_mon + 1;
  d.day = tmTime.tm_mday;
  d.hour = tmTime.tm_hour;
  d.minute = tmTime.tm_min;
  d.second = tmTime.tm_sec;
  return d;
}

CustomDate addDuration(CustomDate date, int duration)
{
     struct tm t = customDateToTm(date);
     time_t tt = mktime(&t);
     tt += duration*60;
     t = *localtime(&tt);
     return tmToCustomDate(t);
}

time_t tmToTimeT(tm t)
{
  time_t tt = mktime(&t);
  return tt;
}

int differenceMinute(CustomDate d1, CustomDate d2)
{
  struct tm t1 = customDateToTm(d1);
  struct tm t2 = customDateToTm(d2);
  time_t tt1 = mktime(&t1);
  time_t tt2 = mktime(&t2);
  return (abs(tt1 - tt2) / 60);
}

bool EnMemeTemps(CustomDate startDate1, CustomDate startDate2, int duration1, int duration2)
{
    bool res = false;
    CustomDate endDate1 = addDuration(startDate1, duration1);
    CustomDate endDate2 = addDuration(startDate2, duration2);
    time_t sd1 = tmToTimeT(customDateToTm(startDate1));
    time_t sd2 = tmToTimeT(customDateToTm(startDate2));
    time_t ed1 = tmToTimeT(customDateToTm(endDate1));
    time_t ed2 = tmToTimeT(customDateToTm(endDate2));

    //Premiere session englobe deuxieme
    if(sd1 < sd2 && ed2 < ed1)
    {
        res = true;
    }
    //Deuxieme session englobe premiere
    else if(sd2 < sd1 && ed1 < ed2)
    {
        res = true;
    }
    //deuxieme commence avant premiere et fini apres debut premiere
    else if(sd2 < sd1 && ed2 < ed1)
    {
        res = true;
    }
    //premiere commence avant deuxieme et fini apres debut deuxieme
    else if(sd1 < sd2 && ed1 < ed2)
    {
        res = true;
    }

    return res;
}

\end

\User CUDA:
//Transfert some variables to GPU here (cudaMalloc, MemCpy)
\end

\User classes :
CustomDate{
  int year;
  int month;
  int day;
  int hour;
  int minute;
  int second;
}
Match {
	CustomDate startDate;
}
GenomeClass{
  Match paper[NB_PAPERS];
}
\end

\Before everything else function:
  readPapers();
\end

\After everything else function:
  cout << "Meilleur score\t\t:\t" << bBest->evaluate() << " points" << endl;
  ofstream myfile;
  myfile.open ("output.txt");
  for(int i = 0; i < NB_PAPERS ; i++)
  {
    CustomDate d1 = bBest->paper[i].startDate;
    CustomDate d2 = addDuration(bBest->paper[i].startDate, papers[i].duration);
    myfile << "Paper " << papers[i].ID << " Track " << papers[i].ID_Track << " Session " << papers[i].ID_Session << '\n';
    myfile << "Start " << d1.day << "/" << d1.month << " at " << d1.hour << ":" << d1.minute << ":" << d1.second << '\n';
    myfile << "End " << d2.day << "/" << d2.month << " at " << d2.hour << ":" << d2.minute << ":" << d2.second << "\n\n";
  }
  myfile.close();
\end

\At the beginning of each generation function:
//cout << "At the beginning of each generation function called" << endl;
\end

\At the end of each generation function:
//cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  for(int i = 0; i < NB_PAPERS; i++)
  {
    CustomDate d;
    d.year = 2015;
    if(tossCoin())
    {
      d.month = 9;
      d.day = 30;
      d.hour = (int) random(6,24);
    }
    else
    {
      d.month = 10;
      d.day = 1;
      d.hour = (int) random(0,24);
    }
    d.minute = (int) random(0, 60);
    d.second = (int) random(0, 60);
    Genome.paper[i].startDate = d;
  }
\end

\GenomeClass::crossover :
  for(int i=0; i < NB_PAPERS; i++)
  {
    if(tossCoin())
    {
      child.paper[i] = parent1.paper[i];
    }
    else
    {
      child.paper[i] = parent2.paper[i];
    }
  }
\end

\GenomeClass::mutator : // Must return the number of mutations
  float fMutProbPerGene=((currentGeneration%40)/40.0)*(NB_PAPERS*.005)+.1;//.235;
  int nbMutations = 0;
  for(int i = 0; i < NB_PAPERS; i++)
  {
    if (tossCoin(fMutProbPerGene)){
      CustomDate d;
      d.year = 2015;
      if(tossCoin())
      {
        d.month = 9;
        d.day = 30;
        d.hour = (int) random(6,24);
      }
      else
      {
        d.month = 10;
        d.day = 1;
        d.hour = (int) random(0,24);
      }
      d.minute = (int) random(0, 60);
      d.second = (int) random(0, 60);
      Genome.paper[i].startDate = d;
      nbMutations++;
    }
  }
	return nbMutations;
\end

\GenomeClass::evaluator : // Returns the score as a real value
  //1/ Pour tout papers du track 15, il faut pas qu'il y ait un autre papers en meme temps
  //2/ Pour chaque paper, vérifier que c'est dans les dispo du chercheur
  //3/ Pour tout paper d'une meme session, il ne doit pas y avoir un autre paper en meme temps
  //4/ Il ne doit pas y avoir trop d'écart entre chaque paper
  int score = 0;
  int bonus = -5;
  int paperMemeSession = 200;
  int chercheurNonDispo = 300;
  int sessionPleniere = 400;
  /*int ecartFaible = -1 ; // <2h -1 par heure
  int ecartMoyen = -5; // <4h -5 par heure
  int ecartFort = -10; // >4h -10 par heure */
  //std::vector<int>numSessions {4,5,6,7,8,9,10,11,12,13,15,16};

  for(int i = 0; i < NB_PAPERS; i++)
  {
    //Vérification disponibilités chercheur
    CustomDate sd = Genome.paper[i].startDate;
    CustomDate ed = addDuration(Genome.paper[i].startDate, papers[i].duration);
    bool dispo = false;

    vector<Interval> dispoIntervals;
    if(sd.day == 30)
      dispoIntervals = papers[i].dispoDay1;
    else if (sd.day == 31)
      dispoIntervals = papers[i].dispoDay2;
    else
      dispoIntervals = papers[i].dispoDay3;

     for(size_t j = 0; j< dispoIntervals.size() ; j++)
     {
        if(sd.hour > dispoIntervals[j].startHour && ed.hour < dispoIntervals[j].endHour)
        {
          dispo = true;
          break;
        }
     }
    //On met une pénalité si non-dispo
    if(!dispo)
    {
      score += chercheurNonDispo;
    }
    else
    {
      score += bonus;
    }
    //Verification overlap paper
    for(int j = i + 1 ; j < NB_PAPERS; j++)
    {
      if(papers[i].ID_Session == papers[j].ID_Session || papers[i].ID_Session == 15 || papers[j].ID_Session == 15) //paper même session ou paper 15
      {
        if(EnMemeTemps(Genome.paper[i].startDate, Genome.paper[j].startDate, papers[i].duration, papers[j].duration))
        {
          //Verification si session pleniere
          if(papers[i].ID_Session == 15 || papers[j].ID_Session == 15)
          {
            score += sessionPleniere;
          }
          else
          {
            score += paperMemeSession;
          }
        }
        else
        {
          score += bonus;
        }
      }
      else
      {
        score += bonus;
      }
    }
  }

  /*for(size_t i = 0 ; i < numSessions.size(); i++) //vérification écart
  {
    vector<CustomDate> papiers;
    vector<int> duree;
    for(int j = 0; j<NB_PAPERS ; j++)
    {
      if(papers[j].ID_Session == numSessions[i])
      {
        papiers.push_back(Genome.paper[j].startDate);
        duree.push_back(papers[j].duration);
      }
    }
    for(size_t k = 0 ; k < papiers.size(); k++)
    {
      for(size_t g = k ; g < papiers.size(); g++)
      {
        CustomDate startDate = papiers[k];
        CustomDate endDate = addDuration(startDate, duree[k]);

        CustomDate startDate2 = papiers[g];
        CustomDate endDate2 = addDuration(startDate2, duree[g]);

        int diff = differenceMinute(endDate,startDate2);
        if(diff<120)
        {
          score += diff * ecartFaible;
        }
        else if(diff<240)
        {
          score += diff * ecartMoyen;
        }
        else
        {
          score += diff * ecartFort;
        }
      }
    }
  }*/

  return score;
\end

\User Makefile options:
  CPPFLAGS+="-std=c++11"
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 100    // NB_GEN
  Time limit: 0 			           // In seconds, 0 to deactivate
  Population size : 64		   //POP_SIZE
  Offspring size : 64// or a xx%
  Mutation probability : 0.8       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : minimise      // maximise
  Selection operator: Tournament 0.6
  Surviving parents: 100%        // Percentage or absolute
  Surviving offspring: 100%      // Percentage or absolute  d
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: strong			           // Weak or Strong
  Elite: 1
  Print stats: true				       // Default: 1
  Generate csv stats file:true
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true				         // Default: 0

  Remote island model: true
  IP file: ip.txt 			         // List of IP:PORT of islands to send individuals to
  Migration probability: 0.3    // Probability of sending an individual per generation
  Server port : 2929

  Save population: false
  Start from file:false
\end
